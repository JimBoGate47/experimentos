
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import scala.Tuple2;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;

import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import com.mongodb.spark.MongoSpark;


/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second and it on a Mongo Database.
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ spark-submit --class SparkToMongo PATH/streamingSparkMongo localhost 9999`
 */
public final class SparkToMongo {
    private static final Pattern SPACE = Pattern.compile(" ");




    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println("Usage: JavaNetworkWordCount <hostname> <port>");
            System.exit(1);
        }

        String UriMongo="mongodb://localhost/streamSpark.coll";
        dropDatabase(UriMongo);

        // Create the context with a 1 second batch size
        SparkConf sparkConf = new SparkConf().setAppName("JavaNetworkWordCount")
                .set("spark.app.id", "MongoSparkConnectorTour")
                .set("spark.mongodb.input.uri", UriMongo)
                .set("spark.mongodb.output.uri", UriMongo);


        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(5));
        /** Create a JavaReceiverInputDStream on target ip:port and count the
         * words in input stream of \n delimited text (eg. generated by 'nc')
         * Note that no duplication in storage level only for running locally.
         * Replication necessary in distributed scenario for fault tolerance.
         */

        JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
                args[0], Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
        JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator());


        JavaPairDStream<String, Integer> wordCounts = words
                .mapToPair( x -> new Tuple2<>(x, 1))
                .reduceByKey( (x,y) -> x + y);


        wordCounts.foreachRDD(rdd -> {

            SparkSession spark = JavaSparkSessionSingleton.getInstance(rdd.context().getConf());

            JavaRDD<JavaRecord> rowRDD = rdd.map(palabra -> {
                JavaRecord record= new JavaRecord();
                record.setWord(palabra._1());
                record.setWord1(palabra._2().toString());
                return record;
            });

            Dataset<Row> wordsDataFrame = spark.createDataFrame(rowRDD, JavaRecord.class);

            MongoSpark.write(wordsDataFrame).option("collection","prueba").mode("append").save();
            wordsDataFrame.show();

        });


        ssc.start();
        ssc.awaitTermination();
    }


    private static void dropDatabase(final String connectionString) {
        MongoClientURI uri = new MongoClientURI(connectionString);
        new MongoClient(uri).dropDatabase(uri.getDatabase());
    }
}


/** Lazily instantiated singleton instance of SparkSession */
class JavaSparkSessionSingleton {
    private static transient SparkSession instance = null;
    public static SparkSession getInstance(SparkConf sparkConf) {
        if (instance == null) {
            instance = SparkSession
                    .builder()
                    .config(sparkConf)
                    .getOrCreate();
        }
        return instance;
    }
}


